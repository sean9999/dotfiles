#!/bin/bash

if [ ! -f ~/.prompt_colors ]; then
	# this is a new box, so randomize colours
	function get_rand() {
		RANGE=256
		number=$RANDOM
		let "number %= $RANGE"
		printf "'%s'" "\e[38;5;${number}m"
	}
	printf "%s\n\n" "#!/bin/bash" >> ~/.prompt_colors
	printf "PROMPT_COLOUR_USER=%s\n" "$(get_rand)" >> ~/.prompt_colors
	printf "PROMPT_COLOUR_CHAR=%s\n" "$(get_rand)" >> ~/.prompt_colors
	printf "PROMPT_COLOUR_HOST=%s\n" "$(get_rand)" >> ~/.prompt_colors
	printf "PROMPT_COLOUR_DIR=%s\n" "$(get_rand)" >> ~/.prompt_colors
	printf "PROMPT_COLOUR_BRANCH=%s\n" $(get_rand) >> ~/.prompt_colors
	printf "%s" "PROMPT_COLOUR_RESET='\e[0m'" >> ~/.prompt_colors
fi
source ~/.prompt_colors

function p() {
	printf "%b" $1
}

source /usr/share/git-core/contrib/completion/git-prompt.sh
GIT_PS1_SHOWDIRTYSTATE=1
export GIT_PS1_SHOWDIRTYSTATE
GIT_PS1_SHOWUNTRACKEDFILES=1
export GIT_PS1_SHOWUNTRACKEDFILES
GIT_PS1_DESCRIBE_STYLE=branch
export GIT_PS1_DESCRIBE_STYLE
GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWUPSTREAM
GIT_PS1_SHOWCOLORHINTS=1
export GIT_PS1_SHOWCOLORHINTS

PS1="\n\[$(p $PROMPT_COLOUR_USER)\]\u \[$(p $PROMPT_COLOUR_CHAR)\]@ \[$(p $PROMPT_COLOUR_HOST)\]\h \[$(p $PROMPT_COLOUR_CHAR)\]∈ \[$(p $PROMPT_COLOUR_DIR)\]\w\[$(p $PROMPT_COLOUR_DIR)\]"
if git rev-parse --git-dir > /dev/null 2>&1 ; then
	PS1="${PS1} \[$(p $PROMPT_COLOUR_CHAR)\]⍦\[$(p $PROMPT_COLOUR_BRANCH)\]$(__git_ps1)"
fi
PS1="${PS1} \[$(p $PROMPT_COLOUR_CHAR)\]Φ\[$(p $PROMPT_COLOUR_RESET)\] "

PS2="\n\[$(p $PROMPT_COLOUR_CHAR)\]→ \[$(p $PROMPT_COLOUR_RESET)\]"

export PS1
export PS2
