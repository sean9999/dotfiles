#!/bin/bash


#   take a full path or file name and return the file extension
function get_extension(){
    printf "%s" $(basename $1 | rev | cut -f 1 -d '.' | rev)
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* *
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`"
		return 1
	fi
	curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
function staticserver() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo # newline
	fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
			echo "Common Name:"
			echo # newline
			echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
			echo # newline
			echo "Subject Alternative Name(s):"
			echo # newline
			echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
				| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
			return 0
	else
		echo "ERROR: Certificate not found.";
		return 1
	fi
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'title' 'body'` or `echo 'body' | note`
# Title is optional
function note() {
	local title
	local body
	if [ -t 0 ]; then
		title="$1"
		body="$2"
	else
		title=$(cat)
	fi
	osascript >/dev/null <<EOF
tell application "Notes"
	tell account "iCloud"
		tell folder "Notes"
			make new note with properties {name:"$title", body:"$title" & "<br><br>" & "$body"}
		end tell
	end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
	local text
	if [ -t 0 ]; then
		text="$1" # argument
	else
		text=$(cat) # pipe
	fi
	osascript >/dev/null <<EOF
tell application "Reminders"
	tell the default list
		make new reminder with properties {name:"$text"}
	end tell
end tell
EOF
}

# Manually remove a downloaded app or file from the quarantine
function unquarantine() {
	for attribute in com.apple.metadata:kMDItemDownloadedDate com.apple.metadata:kMDItemWhereFroms com.apple.quarantine; do
		xattr -r -d "$attribute" "$@"
	done
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		openthis="$(find . -maxdepth 1 -name '*.sublime-project' -print -quit)"
		openthis=${openthis:-.}
		subl $openthis
	else
		subl "$@"
	fi
}

# open the default app
function o() {
	if [ "$(uname)" == "Linux" ]; then
		xdg-open $1
	else
		open $1
	fi
}

# `np` with an optional argument `patch`/`minor`/`major`/`<version>`
# defaults to `patch`
function np() {
	git pull --rebase && \
	rm -rf node_modules && \
	npm install && \
	npm test && \
	npm version ${1:=patch} && \
	npm publish && \
	git push origin master && \
	git push origin master --tags
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

function update(){
	if [ "$(uname)" == "Linux" ]; then
		ubuntu_update;
	else
		osx_update;
	fi
}

function osx_update(){
	cd $HOME \
	&& sudo -v \
	&& echo "Apple..." && softwareupdate -ia \
	&& echo "Homebrew..." && sudo chown -R $USER:admin /usr/local && sudo chown -R $USER:admin ~/Library/Caches/Homebrew && brew update && brew upgrade && brew cleanup \
	&& echo "Latex..." && sudo -H tlmgr update --self --all \
	&& upgrade_python_packges \
	&& echo "composer..." && sudo composer self-update \
	&& echo "ngrok..." && ngrok update \
    && echo "perl..." && sudo -H cpan update \
    && docker-clean && cleanup;
}

function upgrade_python_packges(){
	for package in $(pip3 list | cut -f 1 -d ' '); do
		sudo -HE pip3 install --upgrade $package
	done
}

function ubuntu_update(){
	cd $HOME \
	&& sudo -v \
	&& echo "apt..." && sudo apt-get update && sudo apt-get -q upgrade \
	&& echo "npm..." && sudo -H npm update -g \
	&& echo "composer..." && sudo -H composer selfupdate \
	&& echo "Latex..." && tlmgr update --self --all \
	&& echo "python..." && sudo -H pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | sudo -H xargs -n1 pip install -U && sudo -H pip install --upgrade pip \
	&& echo "python3..." && sudo -H pip3 install --upgrade pip setuptools
}

function docker-clean(){
    if [ $(uname) = "Darwin"  ] ; then
        docker rm -v $(docker ps -a -q -f status=exited)
        docker rmi $(docker images -q -f dangling=true)
        docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
    else
        sudo docker rm -v $(sudo docker ps -a -q -f status=exited)
        sudo docker rmi $(sudo docker images -q -f dangling=true)
        sudo docker run -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker:/var/lib/docker --rm martin/docker-cleanup-volumes
    fi
}

function cleanup(){
	sudo -v;
	sudo find ~ -name '*.DS_Store' -type f -ls -delete -print;
    brew services cleanup;
	brew cask cleanup;
	sudo -H npm dedupe;
	sudo rm -rvf /tmp/*
}

function git_progenitor(){
	echo "someday this function will take a path and return the path of the top-most git repo. It will not be fooled by submodules."
}

function checksum(){
	(echo "Algorithm Checksum"; for alg in "-md5" "-sha" "-sha1" "-sha256" "-sha512"; do echo $(openssl dgst $alg $1); done) | column -t
}

function now(){
	echo "$(date +"%Y-%m-%d-%H-%M")"
}

function rand1(){
    openssl rand -base64 ${1:-32} | tr -d '+\n='
}

function rand2(){
	head -n 1 /dev/urandom | base64 | tr -d '\n+='
}
