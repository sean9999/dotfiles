[include]
	path = ~/.gitconfig-user
	path = ~/.gitconfig-credential
[alias]
  # status
	s = status
  # pretty diff
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat --ignore-all-space --ignore-space-at-eol --ignore-space-change"
  # pretty log
	l = log --graph -n 64 --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit --date=relative
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # upstream diff
  ud = log "@{u}...HEAD" --graph --decorate --left-right --boundary --pretty=format:'%Cred%h%Creset %d %s %Cgreen(%cr)%Creset %Cblue[%an]%Creset' --abbrev-commit --date=relative
	# pull and push.
  pp = !"git pull --all; git remote | xargs -L1 git push --all"
  # add all new changes and then commit
	ac = "!git add --all && git commit"
  # list tags
	tags = tag -l
  # list branches
	branches = branch -a --sort=-committerdate
  # list remotes
	remotes = remote -v
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# Remove branches that have already been merged with master
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# reword
	reword = commit --amend --only -v --
  # create a new branch and a corresponding upstream branch. link the two
  newbranch = "!f() { git checkout -b $1 && git push -u origin $1; }; f"
  # pull repos along with all submodules
	spull = "!git pull && git submodule sync --recursive && git submodule update --init --recursive"
  # delete it here and in upstream
	nuke = "!echo git branch --delete $1 && echo git push --delete origin"
  # echo the full path to the repo root
	root = rev-parse --show-toplevel
  # create a wip (work in progress) commit based on everything new and push to upstream
  wip = "!git add --all . && git commit -m wip && git push"
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and
	# all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of
	# a line
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	fileMode = false
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[push]
	default = simple
[log]
	decorate = full
[branch]
	autosetupmerge = always
	autosetuprebase = local
[filter "media"]
	clean = git-media-clean %f
	smudge = git-media-smudge %f
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[status]
	submoduleSummary = true
[diff "image"]
	command = ~/bin/git-imgdiff
[gui]
	editor = subl
[user]
	email = sean@crazyhorsecoding.com
	name = Sean Macdonald
